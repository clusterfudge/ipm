<project name="common" 
         xmlns:ivy="antlib:org.apache.ivy.ant">
	<!-- set global properties for this build -->
	<property name="dir.src" location="src" />
	<property name="dir.build" location="build/java" />
	<property name="dir.build.test" location="build/test" />
	<property name="dir.test" location="test" />
	<property name="dir.dist" location="dist" />
	<property name="dir.lib" location="lib" />
	<property name="dir.conf" location="conf" />
	<property name="dir.temp" location="build/web" />
	<property name="dir.web" location="WebContent"/>
	<property name="dir.temp.web-inf" location="${dir.temp}/WEB-INF" />
	<property name="dir.reports.test" value="reports/test"/>
	<property name="ivy.install.version" value="2.0.0-beta1"/>
	<property name="ivy.jar.dir" value="${basedir}/ivy"/>
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
	<property name="build.dir" value="build"/>
	<property name="src.dir" value="src"/>

	<target name="download-ivy" depends="check-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}"/>
		<!--
		download Ivy from web site so that it can be used even without any special installation
		-->
		<echo message="installing ivy..."/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>
	<!--
	================================= 
	target: 
	install-ivy 
	this target is not necessary if you put ivy.jar in your ant lib directory if you already have ivy in your ant lib, you can simply remove this target and the dependency the 'go' target has on it 
	=================================
	-->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
	<!--
	try to load ivy here from local ivy dir, in case the user has not already dropped it into ant's lib dir (note that the latter copy will always take precedence). We will not fail as long as local lib dir exists (it may be empty) and ivy is in at least one of ant's lib dir or the local lib dir.
	-->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<path id="classpath">
		<fileset dir="${dir.lib}" includes="*.jar" />
	</path>

	<target name="check-ivy">
		<available file="${ivy.jar.file}" property="skip.download"/>
	</target>

	<target name="init" depends="install-ivy">
		<mkdir dir="${dir.lib}"/>
                <ivy:retrieve />
		<mkdir dir="${dir.build}" />
		<property name="release.name" value="${ant.project.name}" />
	</target>

	<target name="compile" depends="init" description="compile the source ">
		<javac srcdir="${dir.src}" destdir="${dir.build}" classpathref="classpath" debug="true" />
	</target>

	<target name="dist" depends="clean,compile" description="generate the distribution">
		<mkdir dir="${dir.dist}/lib" />
		<jar jarfile="${dir.dist}/lib/${ant.project.name}.jar" basedir="${dir.build}" />
                <ivy:publish resolver="local"
                    artifactspattern="${dir.dist}/lib/[artifact].[ext]"/>
	</target>


	<target name="clean" description="clean up">
		<delete dir="${dir.build}" />
		<delete dir="${dir.dist}" />
		<delete dir="${dir.build.test}"/>
		<delete dir="${dir.lib}" />
		<delete dir="${dir.reports.test}"/>
	</target>

	<target name="compile-test" depends="compile">
		<mkdir dir="${dir.build.test}"/>
		<javac srcdir="${dir.test}" destdir="${dir.build.test}" debug="true">
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${dir.build}"/>
				<pathelement location="${common.dir}/junit.jar"/>
			</classpath>
		</javac>
	</target>

	<target name="war" depends="dist">
		<war destfile="${dir.dist}/lib/${release.name}.war" webxml="${dir.web}/WEB-INF/web.xml" basedir="${dir.web}" excludes="servlet-api.jar">
			<fileset dir="${dir.web}"/>
			<lib dir="${dir.dist}/lib" includes="*.jar"/>
			<lib dir="${dir.lib}" includes="*.jar"/>
		</war>
	</target>

	<target name="run-test" depends="compile-test">
                <mkdir dir="${dir.reports.test}"/>
                <junit haltonerror="false" haltonfailure="false" printsummary="yes" 
                                errorproperty="test.error" failureproperty="test.failed"
                                fork="true" dir="${basedir}">
                        <classpath>
                                <path refid="classpath"/>
                                <pathelement location="${dir.build}"/>
                                <pathelement location="${dir.build.test}"/>
                                <pathelement location="${common.dir}/junit.jar"/>
                        </classpath>

                        <batchtest fork="true" todir="${dir.reports.test}">
                                <fileset dir="${dir.test}">
                                        <include name="**/*Test*.java"/>
                                        <exclude name="**/AllTests.java"/>
                                </fileset>
                        </batchtest>

                </junit>
	</target>
	<target name="test" depends="run-test">
		<junitreport todir="${dir.reports.test}">
			<fileset dir="${dir.reports.test}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${dir.reports.test}" />
		</junitreport>
		<fail message="Test failure detected, check test results." if="test.failed" />
		<fail message="Test error detected, check test results." if="test.error" />
	</target>
</project>
